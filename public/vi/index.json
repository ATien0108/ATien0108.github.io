[
{
	"uri": "//localhost:1313/vi/2-cac-buoc-chuan-bi/2.1-clone-code/",
	"title": "Clone mã nguồn từ GitHub",
	"tags": [],
	"description": "",
	"content": "Tổng quan Dự án Project Management Dashboard đã được lập trình sẵn và lưu trữ trên GitHub. Việc clone mã nguồn về máy giúp bạn có thể chỉnh sửa, cài đặt và chạy thử ứng dụng trên môi trường cục bộ (localhost).\nMã nguồn bao gồm đầy đủ các thành phần: frontend, backend, cấu hình Prisma, dữ liệu mẫu (seed data), ảnh, sơ đồ hệ thống, và các file cấu hình triển khai AWS.\n👉 Kho lưu trữ chính: https://github.com/DyyyPhatt/project-management\nNội dung Mở Terminal, Git Bash, hoặc Command Prompt (nếu dùng Windows).\nThực hiện lệnh sau để clone toàn bộ mã nguồn về máy:\ngit clone https://github.com/ed-roh/project-management-dashboard.git "
},
{
	"uri": "//localhost:1313/vi/4-aws-networking/4.1-tao-vpc/",
	"title": "Tạo VPC",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Tạo môi trường mạng ảo riêng biệt trong AWS\nThiết lập không gian địa chỉ IP cho VPC\nCấu hình các tính năng DNS cơ bản\nCác bước thực hiện Truy cập AWS Management Console\nTìm kiếm dịch vụ VPC\nChọn VPC từ kết quả tìm kiếm\nTrong giao diện VPC Dashboard\nChọn Your VPCs từ menu bên trái\nChọn vào Create VPC\nCấu hình thông số VPC\nResources: Chọn VPC only\nName tag: Nhập PM\nIPv4 CIDR: Nhập 10.0.0.0/16\nLưu ý về Tenancy Giữ tùy chọn Tenancy ở chế độ mặc định (Default). Việc chuyển sang Dedicated có thể giới hạn các loại EC2 Instance được hỗ trợ trong VPC.\nXác nhận tạo VPC\nChọn Create VPC để hoàn tất quá trình Kiểm tra trạng thái VPC sau khi tạo Kích hoạt tính năng DNS cho VPC\nChọn Edit VPC settings\nMở tab DNS settings\nBật DNS hostnames và DNS resolution\nLưu thay đổi\n"
},
{
	"uri": "//localhost:1313/vi/5-ec2/5.1-tao-may-chu-ec2/",
	"title": "Tạo VPC",
	"tags": [],
	"description": "",
	"content": "Cấu hình Instance Truy cập EC2 Dashboard\nTìm kiếm dịch vụ EC2\nChọn EC2 từ kết quả tìm kiếm\nKhởi tạo Instance mới\nChọn Instances từ menu bên trái\nChọn Launch instances instances\nĐặt tên Instance\nTại Name and tags, nhập pm_ec2-backend Chọn Amazon Machine Image (AMI)\nChọn Quick Start\nChọn Amazon Linux 2\nChọn phiên bản AMI phù hợp\nCấu hình Instance và Key Pair\nChọn Instance type phù hợp\nChọn Create new key pair\nTạo Key Pair mới\nKey pair name: Nhập pm-keypair\nKey pair type: Chọn RSA\nPrivate key format: Chọn .pem\nCấu hình Network Thiết lập Network Settings\nVPC: Chọn VPC PM\nSubnet: Chọn Public Subnet 1\nAuto-assign public IP: Chọn Enable\nSecurity Group: Chọn vào mục Create Security Group\nSecurity Group Name: pm_ec2-sg\nDescription: pm_ec2-sg\nChọn Launch instance\nXác nhận khởi tạo thành công Connect Truy cập vào EC2\nChọn Instances\nChọn pm_ec2-backend\nChọn Connect\nTrong mục Connect to instance\nChọn Connection Type\nUsername: ec2-user\nChọn Connect\n=\u0026gt; Kết nối thành công\n"
},
{
	"uri": "//localhost:1313/vi/1-gioi-thieu/1.1-de-tai/",
	"title": "Đề tài",
	"tags": [],
	"description": "",
	"content": "Đề tài tập trung vào việc xây dựng một ứng dụng Project Management Dashboard hiện đại, giúp người dùng có thể:\nTạo và quản lý dự án, nhiệm vụ và thành viên nhóm. Phân quyền người dùng, theo dõi tiến độ và cập nhật thông tin dự án theo thời gian thực. Sử dụng biểu đồ và bảng dữ liệu để trực quan hóa công việc. Ứng dụng được thiết kế dưới dạng web-based, hỗ trợ hoạt động trên nhiều trình duyệt hiện đại và có khả năng mở rộng.\nCác công nghệ chính và dịch vụ được sử dụng Frontend:\n👉 Next.js\nBackend:\n👉 Node.js + Express\nCơ sở dữ liệu:\n👉 PostgreSQL + Prisma\nDịch vụ đám mây AWS:\n👉 Amazon Cognito\n👉 Amazon EC2\n👉 Amazon RDS\n👉 Amazon S3\n👉 Amazon API Gateway\n👉 AWS Lambda\n"
},
{
	"uri": "//localhost:1313/vi/1-gioi-thieu/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Nội dung chính của đề tài:\nỨng dụng Project Management Dashboard là một nền tảng web hiện đại, hỗ trợ người dùng tạo, phân công và theo dõi dự án theo thời gian thực. Giao diện trực quan, dễ sử dụng, tích hợp biểu đồ và bảng dữ liệu giúp nâng cao hiệu quả làm việc nhóm.\nMục tiêu đề tài Quản lý dự án, nhiệm vụ, thành viên nhóm và tiến độ dự án. Phân quyền người dùng rõ ràng, bảo mật. Cập nhật trạng thái và dữ liệu theo thời gian thực. Hỗ trợ kéo – thả nhiệm vụ, hiển thị trực quan bằng biểu đồ. Triển khai linh hoạt trên môi trường đám mây AWS. Công nghệ sử dụng Frontend Next.js: Framework React hỗ trợ SSR/SSG, tăng tốc độ tải trang và tối ưu SEO. Tailwind CSS: Thư viện CSS tiện dụng cho giao diện responsive. Material UI Data Grid: Bảng dữ liệu có sorting, filtering, pagination. Redux Toolkit + RTK Query: Quản lý state và gọi API hiệu quả. React DnD: Kéo – thả nhiệm vụ. Recharts: Vẽ biểu đồ trực quan (cột, tròn, đường\u0026hellip;). Backend Node.js + Express: Cung cấp API RESTful. Typescript: Cải thiện tính rõ ràng và an toàn khi lập trình. Prisma ORM + PostgreSQL: Giao tiếp với CSDL quan hệ, dễ bảo trì và tối ưu truy vấn. PgAdmin, Postman: Hỗ trợ quản lý và kiểm thử trong quá trình phát triển. Dịch vụ AWS tích hợp Amazon Cognito: Đăng nhập, xác thực người dùng, cấp JWT token. Amazon EC2: Máy chủ backend Node.js. Amazon RDS (PostgreSQL): Lưu trữ dữ liệu có quản lý. Amazon S3: Lưu ảnh, tệp đính kèm. AWS Lambda: Xử lý serverless các tác vụ nhỏ như gửi email, cập nhật tự động. Amazon API Gateway: Quản lý và bảo mật các API endpoint. Mô hình hệ thống tổng quan Ứng dụng theo mô hình Client – Server – Cloud với ba tầng chính:\nFrontend (Next.js): Người dùng tương tác qua giao diện dashboard. Gửi JWT token khi gọi API. Backend (Express trên EC2): Xử lý logic nghiệp vụ, xác thực token, kết nối cơ sở dữ liệu. Cơ sở dữ liệu (RDS – PostgreSQL): Lưu trữ thông tin dự án, người dùng, nhiệm vụ. Tích hợp mở rộng:\nS3: Lưu trữ hình ảnh, tệp đính kèm. Lambda: Thực thi tự động khi có sự kiện. API Gateway: Quản lý các API endpoint nếu dùng kiến trúc serverless. Sơ đồ kiến trúc hệ thống:\nNext.js → Cognito → EC2 (Express) → RDS (PostgreSQL)\nTích hợp thêm: S3, Lambda, API Gateway.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "First Cloud Journey",
	"tags": [],
	"description": "",
	"content": "Xây dựng ứng dụng quản lý dự án Nextjs và triển khai trên AWS 📝 TỔNG QUAN ĐỀ TÀI Tên đề tài:\nXây dựng Ứng dụng Quản lý Dự án (Project Management App) bằng Next.js và triển khai trên nền tảng AWS\nMục tiêu đề tài:\nPhát triển một ứng dụng web hiện đại cho phép quản lý dự án, nhiệm vụ, và thành viên nhóm hiệu quả. Hệ thống hỗ trợ xác thực người dùng, phân quyền truy cập, theo dõi tiến độ theo thời gian thực, và trực quan hóa dữ liệu bằng biểu đồ và bảng dữ liệu.\nCông nghệ sử dụng:\nFrontend: Next.js, Tailwind CSS, Material UI Data Grid, Redux Toolkit, Recharts, React DnD Backend: Node.js, Express, Prisma ORM, PostgreSQL Dịch vụ AWS: Cognito, EC2, RDS, S3, Lambda, API Gateway Kiến trúc hệ thống:\nỨng dụng được triển khai theo mô hình Client – Server – Cloud, trong đó:\nGiao diện người dùng xây dựng bằng Next.js, giao tiếp với backend qua API RESTful. Backend xử lý nghiệp vụ và xác thực thông qua Node.js + Express, triển khai trên Amazon EC2. Dữ liệu được lưu trữ và truy vấn hiệu quả bằng PostgreSQL trên Amazon RDS, kết nối qua Prisma ORM. Các tính năng như xác thực người dùng (Cognito), lưu trữ file (S3), xử lý không máy chủ (Lambda), và quản lý endpoint (API Gateway) giúp hệ thống linh hoạt, bảo mật và dễ mở rộng. Kết quả mong đợi:\nXây dựng thành công một ứng dụng dashboard quản lý dự án đầy đủ chức năng, có giao diện hiện đại, trải nghiệm người dùng tốt và sẵn sàng triển khai thực tế trên hạ tầng AWS.\n"
},
{
	"uri": "//localhost:1313/vi/5-ec2/5.2-kiem-tra-ket-noi/",
	"title": "Kiểm tra kết nối",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị môi trường Truy cập quyền root để cài đặt các công cụ hệ thống.\nsudo su -\rCài đặt NVM (Node Version Manager).\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\rTải lại shell để sử dụng nvm\n. ~/.nvm/nvm.sh\rCài đặt phiên bản Node.js mới nhất\nnvm install node\rKiểm tra phiên bản Node và npm đã được cài.\nnode -v npm -v Cài Git và clone project Cập nhật hệ thống và cài đặt Git.\nsudo yum update -y sudo yum install git -y Kiểm tra phiên bản Git.\ngit --version\rTải mã nguồn ứng dụng từ GitHub.\ngit clone https://github.com/DyyyPhatt/project-management.git\rĐiều hướng đến thư mục backend (server).\nls cd project-management ls cd server Cài đặt và chạy server Cài các gói npm cho backend.\nnpm i\rChạy ứng dụng ở chế độ phát triển (development).\nnpm run dev\rTạo file .env và đặt port server là 80\necho \u0026quot;PORT=80\u0026quot; \u0026gt; .env\rChạy lại server với file .env.\nnpm run dev\rCài và cấu hình PM2 để chạy nền Cài đặt pm2 để quản lý tiến trình Node.js.\nnpm i pm2 -g\rTạo file cấu hình PM2 (ecosystem.config.js).\nls\rnano ecosystem.config.js\rThiết lập PM2 tự khởi động khi máy chủ reboot.\nsudo env PATH=$PATH:$(which node) $(which pm2) startup systemd -u $USER --hp $(eval echo $USER)\rKhởi chạy server bằng PM2, kiểm tra trạng thái và giám sát.\npm2 start ecosystem.config.js pm2 status pm2 monit\rDừng và xóa toàn bộ tiến trình PM2 hiện tại.\npm2 stop all pm2 delete all Khởi động lại server từ config.\npm2 start ecosystem.config.js\r"
},
{
	"uri": "//localhost:1313/vi/2-cac-buoc-chuan-bi/2.2-tai-nodejs/",
	"title": "Tải Node.js",
	"tags": [],
	"description": "",
	"content": "Tổng quan Node.js là một môi trường chạy JavaScript phía máy chủ, được sử dụng để xây dựng backend của hệ thống trong đề tài này. Dự án backend sử dụng Node.js kết hợp với Express để xử lý các API và kết nối cơ sở dữ liệu.\nCùng với Node.js, hệ thống còn cần npm (Node Package Manager) – công cụ giúp quản lý và cài đặt các thư viện cần thiết cho cả frontend và backend.\nCả frontend (Next.js) và backend (Express.js) trong dự án đều yêu cầu cài đặt Node.js để chạy và phát triển.\nNội dung Truy cập trang tải chính thức của Node.js: https://nodejs.org/en\nChọn bản ổn định (LTS – Long Term Support) phù hợp với hệ điều hành:\nWindows: .msi installer\nmacOS: .pkg installer\nLinux: chọn phiên bản tương ứng với bản phân phối\nTải xuống và cài đặt như phần mềm thông thường (Next → Next → Install\u0026hellip;).\nKiểm tra cài đặt bằng cách mở terminal hoặc Command Prompt và nhập:\nnode -v npm -v 👉 Nếu kết quả hiển thị phiên bản như v18.x.x (Node) và 9.x.x (npm) → nghĩa là bạn đã cài đặt thành công.\n"
},
{
	"uri": "//localhost:1313/vi/4-aws-networking/4.2-tao-subnet/",
	"title": "Tạo Subnet",
	"tags": [],
	"description": "",
	"content": "Tổng quan Subnet là phân đoạn mạng con trong VPC\nCho phép phân phối tài nguyên theo vùng sẵn sàng (AZ)\nHỗ trợ phân loại mạng public và private\nCác bước thực hiện Truy cập VPC\nChọn Subnets từ menu bên trái\nChọn vào Create subnet\nChọn VPC\nTrong giao diện Create subnet\nChọn VPC PM đã tạo trước đó\nCấu hình Subnet đầu tiên\nSubnet name: Nhập Public Subnet 1\nAvailability Zone: Chọn ap-southeast-1a\nIPv4 CIDR: Nhập 10.0.0.0/24\nChọn Create subnet\nXác nhận tạo subnet thành công Tạo các Subnet bổ sung Lặp lại quy trình để tạo thêm các subnet sau:\nPrivate Subnet 1\nCIDR: 10.0.1.0/24\nAZ: ap-southeast-1a\nPrivate Subnet 2\nCIDR: 10.0.2.0/24\nAZ: ap-southeast-1b\nLưu ý về Availability Zone AWS sử dụng hai khái niệm:\nAvailability Zone (AZ): Tên hiển thị (ví dụ: ap-southeast-1a)\nAZ ID: Định danh thực tế của AZ AWS ánh xạ ngẫu nhiên AZ với AZ ID giữa các tài khoản để đảm bảo phân phối tài nguyên đồng đều.\n"
},
{
	"uri": "//localhost:1313/vi/1-gioi-thieu/1.2-cong-nghe-su-dung/",
	"title": "Công nghệ và công cụ phát triển",
	"tags": [],
	"description": "",
	"content": "Frontend Next.js: Framework React hỗ trợ SSR/SSG giúp tăng tốc độ tải trang và cải thiện SEO. Tailwind CSS: Thư viện tiện lợi để tạo giao diện hiện đại, responsive bằng utility classes. Material UI Data Grid: Bảng dữ liệu chuyên dụng có hỗ trợ sorting, filtering và pagination. Redux Toolkit \u0026amp; RTK Query: Quản lý state toàn cục và gọi API hiệu quả, giảm boilerplate code. React DnD: Cung cấp khả năng kéo – thả (drag and drop) trong giao diện dashboard. Recharts: Thư viện vẽ biểu đồ trực quan như bar chart, pie chart, line chart,… Backend Node.js \u0026amp; Express: Xây dựng API RESTful xử lý logic nghiệp vụ một cách linh hoạt. Prisma ORM: Giao tiếp với cơ sở dữ liệu PostgreSQL, hỗ trợ viết truy vấn rõ ràng, dễ bảo trì. Typescript: Cải thiện độ an toàn khi lập trình, giảm lỗi runtime, tăng khả năng tự hoàn thiện mã. PostgreSQL: Hệ quản trị cơ sở dữ liệu quan hệ mã nguồn mở mạnh mẽ, ổn định. PgAdmin: Giao diện đồ họa để quản lý cơ sở dữ liệu trong quá trình phát triển. Postman: Công cụ test API trực quan, dễ theo dõi request và response trong quá trình dev. "
},
{
	"uri": "//localhost:1313/vi/2-cac-buoc-chuan-bi/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trước khi chạy ứng dụng Project Management Dashboard, bạn cần chuẩn bị đầy đủ công cụ, thư viện và cấu hình môi trường cần thiết cho cả frontend và backend. Mục này hướng dẫn từng bước cài đặt và cấu hình trên máy tính cá nhân.\nDanh sách từng bước ✅ 2.1 – Clone mã nguồn Sử dụng lệnh git clone để tải toàn bộ mã nguồn từ GitHub. Kho lưu trữ: 👉 https://github.com/DyyyPhatt/project-management ✅ 2.2 – Cài đặt Node.js Cần thiết để chạy frontend (Next.js) và backend (Express). Tự động cài đặt kèm công cụ quản lý thư viện npm. ✅ 2.3 – Cài đặt Visual Studio Code IDE được khuyến nghị để viết và quản lý mã nguồn. Cài thêm các tiện ích mở rộng như Markdown, JavaScript/TypeScript, Prisma,\u0026hellip; ✅ 2.4 – Cài đặt PostgreSQL Hệ quản trị cơ sở dữ liệu quan hệ chính của hệ thống. Lưu thông tin người dùng, dự án, nhiệm vụ, nhóm, phân quyền,\u0026hellip; ✅ 2.5 – Cài đặt PgAdmin Công cụ giao diện đồ họa để quản lý cơ sở dữ liệu PostgreSQL. Hỗ trợ xem bảng, dữ liệu mẫu, viết truy vấn SQL. ✅ 2.6 – Cài đặt Postman Công cụ kiểm thử các API (GET, POST, PUT, DELETE). Cho phép gửi token xác thực để kiểm tra quyền truy cập API. ✅ 2.7 – Cài đặt AWS CLI Công cụ dòng lệnh để tương tác với các dịch vụ AWS như EC2, RDS, S3, Cognito. Dùng để triển khai backend và quản lý tài nguyên trên AWS. ✅ 2.8 – Cài đặt thư viện cần thiết Cài thư viện frontend: Next.js, Tailwind CSS, MUI Data Grid, Redux Toolkit, RTK Query, React DnD, Recharts, Gantt Chart,\u0026hellip; Cài thư viện backend: Express.js, Prisma ORM và các công cụ liên quan. 👉 Sau khi hoàn tất các bước trên, bạn có thể tiếp tục với phần cấu hình dự án, thiết lập cơ sở dữ liệu và triển khai hệ thống.\n"
},
{
	"uri": "//localhost:1313/vi/2-cac-buoc-chuan-bi/2.3-tai-vscode/",
	"title": "Tải Visual Studio Code",
	"tags": [],
	"description": "",
	"content": "Tổng quan Bạn một IDE nào đó có các plug-ins hỗ trợ các loại ngôn ngữ cho thuận tiện trong việc viết: Visual Studio Code, Atom, Notepad++,…\nCác plug-ins theo IDE: Nghiễm nhiên sẽ cần plug-ins dành cho Markdown (như Markdown All in One, Markdown TOC,…). Mỗi khi viết 1 file ngôn ngữ gì thì **VS Code cũng gợi ý cài cái plug-ins liên quan nên không phải lo lắng\nNội dung Truy cập vào Visual Studio Code để tải IDE. Truy cập vào trang Document để xem thông tin chi tiết và sử dụng các plugin "
},
{
	"uri": "//localhost:1313/vi/4-aws-networking/4.3-tao-internet-gateway/",
	"title": "Tạo Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Tổng quan Internet Gateway (IGW) là thành phần VPC cho phép kết nối internet\nCung cấp điểm kết nối giữa VPC và internet\nHỗ trợ giao tiếp hai chiều cho các tài nguyên trong VPC\nCác bước thực hiện Truy cập VPC\nChọn Internet Gateways từ menu bên trái\nChọn vào Create internet gateway\nCấu hình Internet Gateway\nTại Name tag, nhập Internet Gateway\nChọn Create internet gateway\nXác nhận tạo Internet Gateway thành công Kết nối với VPC Gắn Internet Gateway vào VPC\nChọn Actions\nChọn Attach to VPC\nChọn VPC PM từ danh sách (VPC ID sẽ tự động điền)\nChọn Attach internet gateway\nXác nhận trạng thái Sau khi gắn thành công:\nState của Internet Gateway sẽ chuyển sang Attached\nIGW đã sẵn sàng định tuyến lưu lượng internet cho VPC\n"
},
{
	"uri": "//localhost:1313/vi/1-gioi-thieu/1.3-dich-vu-aws/",
	"title": "Dịch vụ AWS sử dụng",
	"tags": [],
	"description": "",
	"content": "Amazon Cognito Xử lý đăng ký, đăng nhập và xác thực hai bước (MFA). Cấp JWT token để phân quyền và truy cập API an toàn. Tích hợp tốt với frontend (Next.js) và backend (Express) thông qua SDK hoặc REST API. Amazon EC2 Triển khai backend Node.js như một máy chủ thật. Tùy chỉnh cấu hình RAM, CPU, hệ điều hành. Hỗ trợ triển khai bằng Git, CI/CD hoặc SSH trực tiếp. Amazon RDS (PostgreSQL) Cung cấp cơ sở dữ liệu được quản lý hoàn toàn (auto backup, restore, patching). Cho phép backend (EC2) kết nối nội bộ, bảo mật tốt. Dễ giám sát hiệu năng qua CloudWatch. Amazon S3 Lưu hình ảnh người dùng, file tài liệu đính kèm. Cho phép frontend tải lên hoặc tải xuống theo từng user hoặc group. Dễ tích hợp với frontend thông qua pre-signed URL. AWS Lambda Xử lý các tác vụ nhỏ như gửi email, đồng bộ dữ liệu mà không cần server riêng. Có thể chạy theo event trigger từ S3, DynamoDB, API Gateway,\u0026hellip; Amazon API Gateway Tạo và bảo mật các endpoint backend. Tích hợp tốt với Lambda hoặc backend Express nếu chia thành microservices. Hỗ trợ kiểm soát truy cập (usage plans, API keys, throttling). AWS Amplify Triển khai frontend (Next.js) dễ dàng với CI/CD tích hợp GitHub. Tích hợp với các dịch vụ khác như Cognito, S3, API Gateway nhanh chóng. Hỗ trợ hosting SPA/SSR và backend-as-a-service (GraphQL, REST API). "
},
{
	"uri": "//localhost:1313/vi/3-tao-budget/",
	"title": "Tạo Budget",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong phần này, bạn sẽ học cách tạo AWS Budget sử dụng template có sẵn của AWS. AWS Budget là công cụ quan trọng giúp bạn theo dõi và kiểm soát chi phí AWS một cách hiệu quả. Tạo Budget theo template\nTạo Budget theo template Truy cập vào AWS Management Console:\nMở AWS Management Console\nTìm và chọn dịch vụ AWS Billing and Cost Management\nTrong giao diện AWS Billing and Cost Management:\nChọn Budgets từ menu bên trái\nNhấn vào Create a budget\nThiết lập cấu hình Budget:\nChọn Use a template (simplified) để sử dụng mẫu có sẵn\nTrong phần Templates, chọn Monthly cost budget\nNhập thông tin chi tiết cho Budget:\nĐặt tên cho Budget\nXác định số tiền ngân sách hàng tháng\nThiết lập ngưỡng cảnh báo\nNhấn Create budget để hoàn tất\nXác nhận Budget đã được tạo thành công: Lợi ích của việc sử dụng AWS Budget Templates Information: AWS Budget Templates giúp đơn giản hóa quá trình tạo ngân sách bằng cách cung cấp các cấu hình được định nghĩa trước cho các trường hợp sử dụng phổ biến.\nPro Tip: Sử dụng Monthly cost budget là lựa chọn tốt để bắt đầu, nhưng hãy cân nhắc tạo thêm các budget theo dịch vụ cụ thể khi hệ thống của bạn phát triển.\nSecurity Note: Đảm bảo thiết lập quyền truy cập phù hợp cho AWS Budget để chỉ những người có thẩm quyền mới có thể chỉnh sửa hoặc xóa các budget đã tạo.\nWarning: Các cảnh báo budget không tự động dừng tài nguyên hoặc ngăn chặn việc sử dụng dịch vụ khi vượt quá ngân sách. Hãy cân nhắc kết hợp với AWS Service Quotas hoặc IAM policies để kiểm soát việc sử dụng tài nguyên.\n"
},
{
	"uri": "//localhost:1313/vi/2-cac-buoc-chuan-bi/2.4-tai-postgresql/",
	"title": "Tải PostgreSQL",
	"tags": [],
	"description": "",
	"content": "Tổng quan PostgreSQL là một hệ quản trị cơ sở dữ liệu quan hệ mã nguồn mở, mạnh mẽ và linh hoạt. Trong đề tài này, PostgreSQL được sử dụng làm hệ thống lưu trữ dữ liệu chính cho backend, bao gồm thông tin người dùng, dự án, nhiệm vụ, nhóm, phân quyền,\u0026hellip;\nBackend (Node.js + Express) sẽ tương tác với PostgreSQL thông qua Prisma ORM, giúp quản lý và truy vấn dữ liệu hiệu quả.\nPostgreSQL sẽ được cài đặt và chạy cục bộ trong quá trình phát triển và thử nghiệm hệ thống.\nNội dung Truy cập trang tải PostgreSQL chính thức: https://www.postgresql.org/download/\nChọn hệ điều hành tương ứng (Windows, macOS, Linux).\nVới Windows/macOS, chọn tải về thông qua PostgreSQL Installer (EDB), sau đó chạy file .exe hoặc .pkg.\nTrong quá trình cài đặt:\nChọn cài đặt thêm công cụ PgAdmin (nếu chưa có).\nThiết lập mật khẩu cho user mặc định postgres.\nHoàn tất quá trình cài đặt và kiểm tra PostgreSQL đã hoạt động bằng cách:\nMở PgAdmin hoặc Terminal và dùng lệnh: title = \u0026quot;Write content\u0026quot; "
},
{
	"uri": "//localhost:1313/vi/4-aws-networking/4.4-tao-route-table/",
	"title": "Tạo Route Table",
	"tags": [],
	"description": "",
	"content": "Tổng quan Route Table là thành phần định tuyến lưu lượng mạng trong VPC\nXác định đường đi cho các gói tin giữa các subnet và internet\nCho phép kiểm soát luồng dữ liệu vào/ra VPC\nCác bước thực hiện Truy cập VPC\nChọn Route Tables từ menu bên trái\nChọn vào Create route table\nCấu hình Route Table\nName: Nhập Route table-Public\nVPC: Chọn VPC PM (VPC ID sẽ tự động điền)\nChọn Create route table\nXác nhận tạo Route Table thành công Cấu hình định tuyến Thêm route cho Internet Gateway\nChọn Actions\nChọn Edit routes\nCấu hình route mới\nChọn Add route\nDestination: Nhập 0.0.0.0/0 (đại diện cho internet)\nTarget: Chọn Internet Gateway và chọn IGW đã tạo\nChọn Save changes\nCấu hình định tuyến Thiết lập subnet associations\nChọn tab Subnet associations\nChọn Edit subnet associations\nChọn các public subnet\nMở rộng cột Subnet ID để xem chi tiết\nChọn public subnet đã tạo\nChọn Save associations\nXác nhận cấu hình subnet associations thành công Cấu hình định tuyến Truy cập giao diện VPC\nChọn Route Tables từ menu bên trái\nChọn vào Create route table\nCấu hình Route Table\nName: Nhập Route table-Private-1\nVPC: Chọn VPC PM (VPC ID sẽ tự động điền)\nChọn Create route table\nXác nhận tạo Route Table thành công Tương tự tạo oute table-Private-2 Liên kết với Subnet Thiết lập subnet associations\nChọn tab Subnet associations\nChọn Edit subnet associations\nChọn các public subnet\nMở rộng cột Subnet ID để xem chi tiết\nChọn cả 2 private subnet đã tạo\nChọn Save associations\nXác nhận cấu hình subnet associations thành công\n"
},
{
	"uri": "//localhost:1313/vi/1-gioi-thieu/1.4-mo-hinh-kien-truc/",
	"title": "Mô hình kiến trúc hệ thống",
	"tags": [],
	"description": "",
	"content": "Hệ thống được thiết kế theo mô hình Client – Server – Cloud, đảm bảo các yếu tố linh hoạt, mở rộng, và bảo mật. Ứng dụng bao gồm ba tầng chính: giao diện người dùng (frontend), xử lý nghiệp vụ (backend), và lưu trữ dữ liệu (database) được triển khai trên nền tảng AWS.\nLuồng hoạt động tổng quát 🎯 Frontend (Next.js) Người dùng tương tác qua dashboard: tạo dự án, giao nhiệm vụ, quản lý thành viên. Hệ thống sử dụng Redux Toolkit để quản lý trạng thái và RTK Query để gọi API. Khi người dùng đăng nhập, frontend gửi thông tin xác thực đến Cognito và nhận về JWT token, sau đó sử dụng token này để gọi các API bảo mật. 🔐 AWS Cognito Quản lý đăng ký, đăng nhập, quên mật khẩu, xác thực hai bước (MFA). Trả về JWT token gồm accessToken, idToken và refreshToken. Tích hợp dễ dàng với backend Express để xác thực mỗi API request. ⚙️ Backend (Node.js + Express trên EC2) Nhận các request từ frontend kèm theo JWT token. Xác minh token với AWS Cognito. Xử lý logic nghiệp vụ: tạo/cập nhật dự án, quản lý công việc, người dùng, phân quyền,\u0026hellip; Kết nối với cơ sở dữ liệu PostgreSQL thông qua Prisma ORM. 🗃️ Database (PostgreSQL trên RDS) Lưu trữ dữ liệu về người dùng, dự án, nhiệm vụ, nhóm làm việc. Prisma ORM giúp thực hiện các thao tác như truy vấn, insert, update, delete dữ liệu một cách hiệu quả và an toàn. Quản lý và giám sát dữ liệu qua PgAdmin trong quá trình phát triển. Tùy chọn mở rộng 🗂️ S3: Lưu trữ tệp đính kèm như tài liệu dự án, ảnh đại diện người dùng,\u0026hellip; Dễ dàng kết nối từ frontend. ⚡ Lambda: Thực thi các tác vụ nhẹ như gửi email, xử lý sự kiện, cập nhật trạng thái khi nhiệm vụ hoàn thành. Không cần duy trì máy chủ. 🌐 API Gateway: Quản lý và bảo vệ các endpoint RESTful nếu backend chuyển sang mô hình serverless (kết hợp Lambda + API Gateway). Các sơ đồ hệ thống 🧩 Sơ đồ kiến trúc tổng thể (AWS Architecture) Minh họa các thành phần chính: Next.js → Cognito → EC2 → RDS, tích hợp với S3, Lambda, API Gateway. 🗂️ Sơ đồ dữ liệu (Data Model) Thể hiện mối quan hệ giữa các bảng: User, Project, Task, Team, Priority, Status,\u0026hellip; 🔐 Sơ đồ xác thực Cognito Diễn giải quy trình xác thực qua Cognito: Đăng nhập → nhận token → sử dụng trong API → phân quyền backend.\nSaving User:\nFetching User:\nSecuring API:\n"
},
{
	"uri": "//localhost:1313/vi/4-aws-networking/",
	"title": "AWS NETWORKING",
	"tags": [],
	"description": "",
	"content": "🛰️ Tổng quan về AWS Networking Hệ thống mạng ảo (AWS Networking) trong AWS được xây dựng xoay quanh VPC (Virtual Private Cloud) – một mạng riêng biệt, cách ly logic trong môi trường đám mây. Việc cấu hình các thành phần mạng bao gồm VPC, Subnet, Internet Gateway, và Route Table là bước nền tảng để triển khai các dịch vụ như EC2, RDS,\u0026hellip; hoạt động một cách an toàn và linh hoạt.\nVPC – Virtual Private Cloud Là môi trường mạng riêng biệt trong AWS. Cho phép người dùng định nghĩa không gian địa chỉ IP, cấu hình DNS, kiểm soát truy cập và định tuyến lưu lượng. Là lớp mạng gốc để chứa các subnet, gateway, security group,\u0026hellip; Subnet – Mạng con Subnet chia VPC thành các đoạn mạng nhỏ hơn, phân bố theo Availability Zone (AZ). Có thể được cấu hình là Public (truy cập internet) hoặc Private (chỉ truy cập nội bộ). Cho phép tổ chức tài nguyên (EC2, RDS,\u0026hellip;) một cách logic và an toàn. Internet Gateway – Cổng kết nối internet Là cầu nối giữa VPC và internet. Cần được gắn vào VPC để các subnet public có thể truy cập hoặc nhận lưu lượng từ bên ngoài. Hỗ trợ giao tiếp 2 chiều cho các tài nguyên như EC2 đặt trong public subnet. Route Table – Bảng định tuyến Quy định hướng đi của lưu lượng mạng trong VPC. Cho phép ánh xạ lưu lượng đến Internet Gateway, subnet khác hoặc VPN. Mỗi subnet cần được liên kết (associate) với một Route Table phù hợp với chức năng (public/private). ✅ Tổng kết Thành phần Vai trò chính VPC Mạng riêng biệt chứa toàn bộ tài nguyên mạng Subnet Chia nhỏ không gian mạng, định nghĩa phạm vi hoạt động của tài nguyên Internet Gateway Kết nối mạng công cộng, cho phép truy cập internet cho subnet Route Table Xác định tuyến đường cho lưu lượng mạng, ánh xạ subnet với Gateway hoặc VPC khác "
},
{
	"uri": "//localhost:1313/vi/5-ec2/",
	"title": "EC2",
	"tags": [],
	"description": "",
	"content": "Tổng quan Amazon EC2 (Elastic Compute Cloud) là dịch vụ máy chủ ảo của AWS cho phép bạn chạy ứng dụng một cách linh hoạt, linh động và theo nhu cầu thực tế. Trong đề tài này, EC2 được sử dụng để triển khai ứng dụng backend.\nCác bước thực hiện chính bao gồm:\nKhởi tạo instance EC2: Chọn hệ điều hành, cấu hình phần cứng, cài đặt cặp khóa bảo mật và gán vào mạng VPC phù hợp.\nKết nối và thiết lập môi trường: SSH vào instance, cài Node.js, Git và các thư viện cần thiết để chạy ứng dụng backend Node.js.\nQuản lý tiến trình bằng PM2: Giúp chạy server ở chế độ nền và tự động khởi động lại khi máy chủ reboot.\nViệc nắm vững thao tác với EC2 sẽ giúp bạn triển khai ứng dụng một cách chủ động mà không phụ thuộc hoàn toàn vào dịch vụ serverless.\n"
},
{
	"uri": "//localhost:1313/vi/2-cac-buoc-chuan-bi/2.5-tai-pgadmin/",
	"title": "Tải PgAdmin",
	"tags": [],
	"description": "",
	"content": "Tổng quan PgAdmin là công cụ quản trị cơ sở dữ liệu PostgreSQL thông qua giao diện đồ họa (GUI), giúp người phát triển dễ dàng:\nTạo và quản lý cơ sở dữ liệu.\nTruy vấn SQL trực tiếp.\nTheo dõi cấu trúc bảng, quan hệ và dữ liệu thực tế.\nTrong dự án này, PgAdmin đóng vai trò là công cụ hỗ trợ quan sát và thao tác dữ liệu trong quá trình phát triển, đặc biệt hữu ích khi kết hợp với Prisma ORM và seed data.\nNội dung Truy cập trang tải chính thức: https://www.pgadmin.org/download/\nChọn phiên bản phù hợp với hệ điều hành đang sử dụng (Windows/macOS/Linux).\nTải về và tiến hành cài đặt như các phần mềm thông thường.\nSau khi cài đặt:\nMở PgAdmin 4 từ menu hệ thống.\nỞ lần đầu mở, hệ thống yêu cầu tạo mật khẩu cho giao diện → nhập và ghi nhớ.\nNhấn Add New Server để kết nối với PostgreSQL local:\nName: localhost\nHost name / address: localhost\nPort: 5432\nUsername: postgres\nPassword: (mật khẩu bạn đặt khi cài PostgreSQL, ví dụ: 1234)\nSau khi kết nối thành công, bạn có thể:\nTạo database mới (ví dụ: project_dashboard)\nQuan sát bảng, dữ liệu mẫu (seed data)\nChạy truy vấn SQL trực tiếp trong tab Query Tool\n"
},
{
	"uri": "//localhost:1313/vi/6-rds/",
	"title": "RDS",
	"tags": [],
	"description": "",
	"content": " Truy cập vào Amazon RDS Console: Chọn Databases\nChọn Create database\nChọn phương thức tạo database: Chọn Standard create Cấu hình Engine database: Chọn PostgreSQL Cấu hình Template: Chọn Free-tier Tiếp theo, thực hiện cài đặt chi tiết: DB instance identifier: nhập pm-rds\nMaster username: nhập postgres\nChọn sang Self managed\nTiếp tục: Master password: nhập tùy ý của bạn (Ví dụ: hellomyfriend1234)\nConfirm password: nhập lại password một lần nữa\nStorage - Storage autoscaling Tick bỏ chọn Enable storage autoscaling Connectivity Virtual Private Cloud (VPC): Chọn VPC PM\nDB subnet group: Chọn Create new DB Subnet Group\nPublic Access: Chọn No\nVPC Security Group: Chọn Create new\nNew VPC security group name: pm_rd-sg\nAvailability Zone: ap-southeast-1a\nMonitoring: bỏ chọn Enable Performance Insights Additional configuration Initial database name: nhập projectmanagement\nDB parameter group: chọn default.postgres17\nBackup bỏ chọn Enable automated backups\nEncryption bỏ chọn Enable encryption\nCreate Dateabse Edit inbound rules - Security Group Truy cập vào EC2\nChọn Security Group\nChọn pm_rd-sg\nChọn Edit inbound rules\nChọn Add rule\nType: PostgreSQL\nSource: Customer\nChọn pm_ec2-sg\nSave rules\nEdit outbound rules - Security Group Truy cập vào EC2\nChọn Security Group\nChọn pm_ec2-sg\nChọn Edit outbound rules\nChọn Add rule\nType: PostgreSQL\nSource: Customer\nChọn pm_rd-sg\nSave rules\nTruy cập vào EC2 Instance Connect pm2 delete all\nnano .env\nDán đoạn code vào .env sau đó save\nDATABASE_URL=\u0026quot;postgresql://postgres:\u0026lt;mật khẩu RDS\u0026gt;@\u0026lt;endpoint_RDS\u0026gt;:5432/\u0026lt;DB Name\u0026gt;?schema=public\u0026quot; Sinh các tệp Prisma Client từ schema.\nnpx prisma generate Tạo và chạy migration để khởi tạo database (init là tên migration).\nnpx prisma migrate dev --name init Chạy lệnh seed để thêm dữ liệu mẫu vào DB.\nnpm run seed Khởi động lại ứng dụng với môi trường và DB đã hoàn chỉnh.\npm2 start ecosystem.config.js "
},
{
	"uri": "//localhost:1313/vi/2-cac-buoc-chuan-bi/2.6-tai-postman/",
	"title": "Tải Postman",
	"tags": [],
	"description": "",
	"content": "Tổng quan Postman là công cụ hỗ trợ kiểm thử API phổ biến nhất hiện nay. Nó cho phép lập trình viên:\nGửi request (GET, POST, PUT, DELETE, PATCH) đến server backend.\nĐính kèm header, body, token để kiểm tra xác thực.\nQuan sát trực tiếp phản hồi từ API.\nLưu lại các tập request theo collection để dùng nhiều lần.\nTrong đề tài này, Postman được dùng để:\nKiểm tra hoạt động của các API do backend Express cung cấp.\nGửi token xác thực từ Cognito để kiểm tra phân quyền.\nThử nghiệm nhanh chức năng tạo dự án, nhiệm vụ, người dùng,… trước khi tích hợp với frontend.\nNội dung Truy cập trang chủ chính thức của Postman: https://www.postman.com/downloads/\nChọn đúng hệ điều hành và tải về:\nWindows: file .exe\nmacOS: file .zip hoặc .dmg\nLinux: file .tar.gz hoặc AppImage\nCài đặt như phần mềm thông thường. Sau khi mở Postman, bạn có thể đăng nhập tài khoản (hoặc chọn \u0026ldquo;Skip and take me to the app\u0026rdquo;).\nGiao diện chính của Postman bao gồm:\nRequest URL: nơi nhập endpoint API.\nMethod: chọn phương thức HTTP (GET, POST,…).\nHeaders: thêm thông tin như Authorization: Bearer [token].\nBody: dùng với POST/PUT để gửi dữ liệu JSON.\nTạo Collection riêng cho dự án để lưu các request dùng nhiều lần (vd: Login, Get All Projects, Create Task,\u0026hellip;)\n"
},
{
	"uri": "//localhost:1313/vi/7-amplify/",
	"title": "Amplify",
	"tags": [],
	"description": "",
	"content": " Truy cập AWS Management Console Tìm kiếm dịch vụ AWS Amplify\nChọn AWS Amplify từ kết quả tìm kiếm\nChọn Deploy An App Start building with Amplify\nChọn Github\nChọn Next\nAdd repository and branch\nChọn Repo project-management\nChọn My app is a monorepo\nMonorepo root directory: client\nChọn Next\nApp settings\nKey: NEXT_PUBLIC_API_BASE_URL\nValue: \u0026lt; Public IPv4 Address \u0026gt;\nChọn Next\nReview\nChọn Save and Deploy "
},
{
	"uri": "//localhost:1313/vi/2-cac-buoc-chuan-bi/2.7-tai-aws-cli/",
	"title": "Tải AWS CLI",
	"tags": [],
	"description": "",
	"content": "Tổng quan AWS CLI (Command Line Interface) là công cụ dòng lệnh chính thức của Amazon Web Services, cho phép người dùng:\nTương tác và quản lý tài nguyên AWS trực tiếp từ terminal.\nTriển khai dịch vụ EC2, RDS, S3, Cognito,\u0026hellip; bằng lệnh thay vì thao tác thủ công trên giao diện web.\nTích hợp với các quy trình DevOps, CI/CD, tự động hóa triển khai backend hoặc migrate dữ liệu.\nTrong đề tài này, AWS CLI được sử dụng để:\nKết nối và triển khai ứng dụng backend lên Amazon EC2.\nCấu hình truy cập dịch vụ RDS, S3, Cognito.\nQuản lý các tài nguyên AWS qua lệnh hoặc script shell.\nNội dung Truy cập trang chính thức của AWS CLI: https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html\nChọn phiên bản phù hợp với hệ điều hành:\nWindows: tải file .msi\nmacOS: dùng Homebrew hoặc file .pkg\nLinux: sử dụng lệnh curl hoặc yum, apt tùy distro\nCài đặt theo hướng dẫn. Sau khi cài thành công, mở Terminal (hoặc CMD) và kiểm tra: aws --version\n✅ Nếu hiển thị như: aws-cli/2.15.x Python/3.x.x\n=\u0026gt; Bạn đã cài thành công AWS CLI phiên bản 2.\nĐăng nhập AWS CLI với tài khoản cá nhân: aws configure\nCLI sẽ yêu cầu nhập: AWS Access Key ID và AWS Secret Access Key\nDefault region (ví dụ: us-east-1)\nDefault output format (gợi ý: json)\nBạn có thể tạo Access Key trong trang AWS IAM \u0026gt; Security credentials.\n"
},
{
	"uri": "//localhost:1313/vi/8-api-gateway/",
	"title": "API Gateway",
	"tags": [],
	"description": "",
	"content": " Truy cập AWS Management Console Tìm kiếm dịch vụ API Gateway Chọn API Gateway từ kết quả tìm kiếm Tìm đến mục REST API Chọn Build Create REST API Chọn New API API name: pm_api-gateway Chọn Create API ✅ Xác nhận tạo REST API thành công\nTìm đến mục Resource\nChọn Create Resource\nMở Proxy Resource Resource name: {proxy+} Chọn CORS (Cross Origin Resource Sharing) Chọn Create Resource ✅ Xác nhận tạo Resource thành công\nTrong Methods của Resource Chọn ANY Chọn Edit integration Integration Type: HTTP Mở HTTP proxy integration HTTP Method: ANY Endpoint URL: \u0026lt;Public IPv4 Address\u0026gt;/{proxy} Content handling: Passthrough Chọn Save ✅ Xác nhận chỉnh sửa thành công\nChọn Deploy API Stage: New stage Stage name: prod Chọn Deploy Kiểm tra API Truy cập AWS Management Console Tìm kiếm dịch vụ AWS Amplify Chọn AWS Amplify từ kết quả tìm kiếm Chọn View app - Project Management Chọn Environment Variables Chọn Manage Variables Cập nhật Value của biến NEXT_PUBLIC_API_BASE_URL Chọn Save Chọn Overview Chọn master Chọn Redeploy this version "
},
{
	"uri": "//localhost:1313/vi/2-cac-buoc-chuan-bi/2.8-cai-dat-thu-vien/",
	"title": "Cài đặt thư viện",
	"tags": [],
	"description": "",
	"content": "Frontend – Thư viện giao diện và client-side logic Next.js: Framework React cho SSR, routing, cấu trúc dự án hiện đại\nnpm install next react react-dom Tailwind CSS: CSS utility-first giúp xây dựng giao diện nhanh, tùy biến cao\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\nMaterial UI Data Grid (MUI): Hiển thị bảng dữ liệu mạnh mẽ, hỗ trợ sorting, filtering, pagination\nnpm install @mui/x-data-grid Redux Toolkit \u0026amp; Redux Toolkit Query: Quản lý state và gọi API hiệu quả, tối ưu hiệu suất\nnpm install @reduxjs/toolkit react-redux\nnpm install @reduxjs/toolkit/query react-redux\nReact DnD: Tạo chức năng kéo thả (drag \u0026amp; drop) cho task, project,\u0026hellip;\nnpm install react-dnd react-dnd-html5-backend Recharts: Vẽ biểu đồ đơn giản, đẹp mắt: bar, line, pie,\u0026hellip;\nnpm install recharts Gantt Charts: Tạo biểu đồ Gantt để quản lý timeline dự án\nnpm install gantt-task-react Backend – Thư viện xử lý và kết nối dữ liệu Express.js: Framework Node.js đơn giản, linh hoạt để xây dựng REST API\nnpm install express Prisma ORM: Công cụ ORM hiện đại để kết nối và thao tác với cơ sở dữ liệu PostgreSQL\nnpm install prisma\nnpx prisma init\n"
},
{
	"uri": "//localhost:1313/vi/9-s3/",
	"title": "S3",
	"tags": [],
	"description": "",
	"content": " Truy cập AWS Management Console Tìm kiếm dịch vụ Amazon S3 Chọn Amazon S3 từ kết quả tìm kiếm Chọn Create bucket Bucket name: pm-s3-images-ws Bỏ chọn Block all public access Tích chọn I acknowledge that the current settings might result in this bucket and the objects within becoming public Chọn Create bucket ✅ Xác nhận tạo bucket thành công\nChọn bucket pm-s3-images-ws Upload toàn bộ ảnh trong thư mục public của thư mục client Files and folders: 29 Total, 16.3 MB Chọn Upload Chọn Close Cấu hình quyền truy cập Chọn tab Permissions Chọn Edit tại mục Bucket policy Dán đoạn mã JSON sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::pm-s3-images-ws/*\u0026#34; } ] } Chọn Save changes Cập nhật đoạn code file next.config.ts import type { NextConfig } from \u0026#34;next\u0026#34;; const nextConfig: NextConfig = { images: { remotePatterns: [ { protocol: \u0026#34;https\u0026#34;, hostname: \u0026#34;pm-s3-images-ws.s3.ap-southeast-1.amazonaws.com\u0026#34;, port: \u0026#34;\u0026#34;, pathname: \u0026#34;/**\u0026#34;, }, ], }, }; export default nextConfig; Cập nhật lại tất cả các thẻ \u0026lt; Image \u0026gt; với đường dẫn mới Thực hiện Push code lên Github để Deploy lại Website "
},
{
	"uri": "//localhost:1313/vi/10-cognito/",
	"title": "Cognito",
	"tags": [],
	"description": "",
	"content": " Truy cập AWS Management Console Tìm kiếm dịch vụ Amazon Cognito Chọn Amazon Cognito từ kết quả tìm kiếm Chọn Create user pool Ở Configure sign-in experience\nChọn User name, Email\nChọn Allow users to sign in with a preferred user name và Make username case sensitive\nChọn Next\n✅ Xác nhận thành công\nCập nhật đoạn code Vào User pool Chọn User pool - pbk6qc Chọn tab App clients Ở App client name: Project Management Copy Client ID Dán \u0026lt; Client ID \u0026gt; vào file .env.local ở dòng: NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID Truy cập AWS Management Console Tìm kiếm dịch vụ AWS Amplify Chọn AWS Amplify từ kết quả tìm kiếm Chọn View app - Project Management\nChọn Environment Variables\nChọn Add new Variable: NEXT_PUBLIC_COGNITO_USER_POOL_ID Value: là giá trị trong code .env.local ở dòng NEXT_PUBLIC_COGNITO_USER_POOL_ID Variable: NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID Value: là giá trị trong code .env.local ở dòng NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID Chọn Save Truy cập AWS Management Console Tìm kiếm dịch vụ Lambda Chọn Lambda từ kết quả tìm kiếm Chọn Create a function Chọn Author from scratch Function name: pm_lambda-trigger Chọn Create function Chọn vào lambda vừa tạo pm_lambda-trigger Ở tab Code Nhập đoạn code: import https from \u0026#34;node:https\u0026#34;; export const handler = async (event: any) =\u0026gt; { const postData = JSON.stringify({ username: event.request.userAttributes[\u0026#34;preferred_username\u0026#34;] || event.userName, cognitoId: event.userName, profilePictureUrl: \u0026#34;i1.jpg\u0026#34;, teamId: 1, }); const options = { hostname: \u0026#34;\u0026lt;your-api-gateway-id\u0026gt;.execute-api.\u0026lt;region\u0026gt;.amazonaws.com\u0026#34;, port: 443, path: \u0026#34;/create-user\u0026#34;, method: \u0026#34;POST\u0026#34;, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;Content-Length\u0026#34;: Buffer.byteLength(postData), }, }; await new Promise((resolve, reject) =\u0026gt; { const req = https.request(options, (res) =\u0026gt; { res.setEncoding(\u0026#34;utf8\u0026#34;); let responseBody = \u0026#34;\u0026#34;; res.on(\u0026#34;data\u0026#34;, (chunk) =\u0026gt; { responseBody += chunk; }); res.on(\u0026#34;end\u0026#34;, () =\u0026gt; { console.log(\u0026#34;Response from API:\u0026#34;, responseBody); resolve(responseBody); }); }); req.on(\u0026#34;error\u0026#34;, (error) =\u0026gt; { console.error(\u0026#34;Error in HTTPS request:\u0026#34;, error); reject(error); }); req.write(postData); req.end(); }); return event; }; Chọn Deploy "
},
{
	"uri": "//localhost:1313/vi/11-ket-qua-dat-duoc/",
	"title": "Kết quả đạt được",
	"tags": [],
	"description": "",
	"content": "Trang Đăng ký Trang Đăng nhập Trang Dashboard Trang Timeline Trang Search Trang Settings Trang Users Trang Teams Trang Project "
},
{
	"uri": "//localhost:1313/vi/12-don-dep-tai-nguyen/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Xóa Cognito Xóa Lamda Xóa S3 Xóa API Gateway Xóa AWS Amplify Xóa RDS Xóa EC2 Xóa Key Pair Xóa VPC Xóa Subnet "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]